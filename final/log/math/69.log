=================================================
Project : math_69	start : 17/08/24 10:21
Current failed test : org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero | 17/08/24 10:21
Thu Aug 24 10:22:31 AEST 2017 org.apache.commons.math.stat.correlation.PearsonsCorrelation,68
Thu Aug 24 10:22:38 AEST 2017 Thu Aug 24 10:22:38 AEST 2017 : org.apache.commons.math.stat.correlation.PearsonsCorrelation,69=>Find no block
Thu Aug 24 10:22:40 AEST 2017 org.apache.commons.math.util.ContinuedFraction,46
Thu Aug 24 10:22:46 AEST 2017 Thu Aug 24 10:22:46 AEST 2017 : org.apache.commons.math.util.ContinuedFraction,47=>Find no block
Thu Aug 24 10:22:47 AEST 2017 org.apache.commons.math.util.ContinuedFraction,128
Thu Aug 24 10:24:48 AEST 2017 org.apache.commons.math.util.ContinuedFraction,129
Thu Aug 24 10:24:49 AEST 2017 org.apache.commons.math.util.ContinuedFraction,130
Thu Aug 24 10:27:03 AEST 2017 org.apache.commons.math.util.ContinuedFraction,131
Thu Aug 24 10:29:38 AEST 2017 org.apache.commons.math.util.ContinuedFraction,132
Thu Aug 24 10:34:45 AEST 2017 org.apache.commons.math.util.ContinuedFraction,133

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double c=q0/q1;
int n=0;
double relativeError=q0;

Time : 17/08/24 10:39
----------------------------------------
Thu Aug 24 10:44:15 AEST 2017 org.apache.commons.math.util.ContinuedFraction,134
Thu Aug 24 10:44:17 AEST 2017 org.apache.commons.math.util.ContinuedFraction,135
Thu Aug 24 11:15:35 AEST 2017 org.apache.commons.math.util.ContinuedFraction,136
Thu Aug 24 11:19:51 AEST 2017 org.apache.commons.math.util.ContinuedFraction,137
Thu Aug 24 11:19:52 AEST 2017 org.apache.commons.math.util.ContinuedFraction,138

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double a=getA(n,x);
double b=getB(n,x);
double p2=x*p1+b*p0;

Time : 17/08/24 11:25
----------------------------------------
Thu Aug 24 11:25:39 AEST 2017 org.apache.commons.math.util.ContinuedFraction,139

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double b=getB(n,x);
double p2=x*p1+b*p0;
double q2=a*q1+b*q0;

Time : 17/08/24 11:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double b=getB(n,x);
double p2=x*p1+x*p0;
double q2=a*q1+b*q0;

Time : 17/08/24 11:31
----------------------------------------
Thu Aug 24 11:33:55 AEST 2017 org.apache.commons.math.util.ContinuedFraction,140
Thu Aug 24 11:37:33 AEST 2017 org.apache.commons.math.util.ContinuedFraction,141
Thu Aug 24 11:37:35 AEST 2017 org.apache.commons.math.util.ContinuedFraction,142
Thu Aug 24 11:37:36 AEST 2017 org.apache.commons.math.util.ContinuedFraction,175
Thu Aug 24 11:37:38 AEST 2017 org.apache.commons.math.util.ContinuedFraction,182
Thu Aug 24 11:51:48 AEST 2017 org.apache.commons.math.util.ContinuedFraction,184
Thu Aug 24 11:51:50 AEST 2017 org.apache.commons.math.util.ContinuedFraction,189
Thu Aug 24 12:07:34 AEST 2017 org.apache.commons.math.util.ContinuedFraction,192
Thu Aug 24 12:33:30 AEST 2017 org.apache.commons.math.util.ContinuedFraction,193
Thu Aug 24 12:46:24 AEST 2017 org.apache.commons.math.util.ContinuedFraction,194
Thu Aug 24 13:05:21 AEST 2017 org.apache.commons.math.util.ContinuedFraction,195
Thu Aug 24 13:16:44 AEST 2017 org.apache.commons.math.util.ContinuedFraction,196
Thu Aug 24 13:16:46 AEST 2017 Thu Aug 24 13:16:46 AEST 2017 : org.apache.commons.math.util.ContinuedFraction,197=>Find no block
Thu Aug 24 13:16:48 AEST 2017 org.apache.commons.math.util.ContinuedFraction,199
Thu Aug 24 13:25:22 AEST 2017 org.apache.commons.math.util.ContinuedFraction,205
Thu Aug 24 13:32:56 AEST 2017 org.apache.commons.math.distribution.TDistributionImpl,128

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x=t*Math.sqrt(DEFAULT_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY)-0.5;
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}

Time : 17/08/24 13:35
----------------------------------------
Thu Aug 24 13:47:37 AEST 2017 org.apache.commons.math.distribution.TDistributionImpl,131
Thu Aug 24 13:47:38 AEST 2017 org.apache.commons.math.distribution.TDistributionImpl,136
Thu Aug 24 13:47:39 AEST 2017 org.apache.commons.math.distribution.TDistributionImpl,139
Thu Aug 24 13:47:39 AEST 2017 org.apache.commons.math.distribution.TDistributionImpl,143

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0.0){
ret=0.5;
}else {
double t=Beta.regularizedBeta(degreesOfFreedom/(degreesOfFreedom+(x*x)),0.5*degreesOfFreedom,0.5);
if(x<0.0){
ret=0.5*t;
}else {
ret=1.0-0.5*t;
}
}
if(degreesOfFreedom<0.5){
ret=-Double.MAX_VALUE;
}else {
ret=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
}
return ret;

Time : 17/08/24 13:48
----------------------------------------
Thu Aug 24 14:01:25 AEST 2017 org.apache.commons.math.special.Beta,54
Thu Aug 24 14:01:28 AEST 2017 org.apache.commons.math.special.Beta,121
Thu Aug 24 14:10:55 AEST 2017 org.apache.commons.math.special.Beta,125
Thu Aug 24 14:10:56 AEST 2017 org.apache.commons.math.special.Beta,128
Thu Aug 24 14:10:59 AEST 2017 org.apache.commons.math.special.Beta,151
Thu Aug 24 14:14:44 AEST 2017 org.apache.commons.math.special.Beta,156

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x>(a+1.0)/(a+b)){
ret=1.0-regularizedBeta(1.0-x,b,a,epsilon,maxIterations);
}else {
ContinuedFraction fraction=new ContinuedFraction(){
  @Override protected double getB(  int n,  double x){
    double ret;
    double m;
    if (n % 2 == 0) {
      m=n / 2.0;
      ret=(m * (b - m) * x) / ((a + (2 * m) - 1) * (a + (2 * m)));
    }
 else {
      m=(n - 1.0) / 2.0;
      ret=-((a + m) * (a + b + m) * x) / ((a + (2 * m)) * (a + (2 * m) + 1.0));
    }
    return ret;
  }
  @Override protected double getA(  int n,  double x){
    return 1.0;
  }
}
;
ret=Math.exp((a*Math.log(x))+(b*Math.log(1.0-x))-Math.log(a)-logBeta(a,b,epsilon,maxIterations))*1.0/fraction.evaluate(x,epsilon,maxIterations);
}
return x;

Time : 17/08/24 14:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x>(a+1.0)/(a+b)){
ret=1.0-regularizedBeta(1.0-x,b,a,epsilon,maxIterations);
}else {
ContinuedFraction fraction=new ContinuedFraction(){
  @Override protected double getB(  int n,  double x){
    double ret;
    double m;
    if (n % 2 == 0) {
      m=n / 2.0;
      ret=(m * (b - m) * x) / ((a + (2 * m) - 1) * (a + (2 * m)));
    }
 else {
      m=(n - 1.0) / 2.0;
      ret=-((a + m) * (a + b + m) * x) / ((a + (2 * m)) * (a + (2 * m) + 1.0));
    }
    return ret;
  }
  @Override protected double getA(  int n,  double x){
    return 1.0;
  }
}
;
ret=Math.exp((a*Math.log(x))+(b*Math.log(1.0-x))-Math.log(a)-logBeta(a,b,epsilon,maxIterations))*1.0/fraction.evaluate(x,epsilon,maxIterations);
}
if(b<=0.0){
ret=0.0;
}else {
ret=1.0-Math.exp(-Math.pow(x/DEFAULT_EPSILON,epsilon));
}
return ret;

Time : 17/08/24 14:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x>(a+1.0)/(a+b)){
ret=1.0-regularizedBeta(1.0-x,b,a,epsilon,maxIterations);
}else {
ContinuedFraction fraction=new ContinuedFraction(){
  @Override protected double getB(  int n,  double x){
    double ret;
    double m;
    if (n % 2 == 0) {
      m=n / 2.0;
      ret=(m * (b - m) * x) / ((a + (2 * m) - 1) * (a + (2 * m)));
    }
 else {
      m=(n - 1.0) / 2.0;
      ret=-((a + m) * (a + b + m) * x) / ((a + (2 * m)) * (a + (2 * m) + 1.0));
    }
    return ret;
  }
  @Override protected double getA(  int n,  double x){
    return 1.0;
  }
}
;
ret=Math.exp((a*Math.log(x))+(b*Math.log(1.0-x))-Math.log(a)-logBeta(a,b,epsilon,maxIterations))*1.0/fraction.evaluate(x,epsilon,maxIterations);
}
return a;

Time : 17/08/24 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x>(a+1.0)/(a+b)){
ret=1.0-regularizedBeta(1.0-x,b,a,epsilon,maxIterations);
}else {
ContinuedFraction fraction=new ContinuedFraction(){
  @Override protected double getB(  int n,  double x){
    double ret;
    double m;
    if (n % 2 == 0) {
      m=n / 2.0;
      ret=(m * (b - m) * x) / ((a + (2 * m) - 1) * (a + (2 * m)));
    }
 else {
      m=(n - 1.0) / 2.0;
      ret=-((a + m) * (a + b + m) * x) / ((a + (2 * m)) * (a + (2 * m) + 1.0));
    }
    return ret;
  }
  @Override protected double getA(  int n,  double x){
    return 1.0;
  }
}
;
ret=Math.exp((a*Math.log(x))+(b*Math.log(1.0-x))-Math.log(a)-logBeta(a,b,epsilon,maxIterations))*1.0/fraction.evaluate(x,epsilon,maxIterations);
}
if(b<=0.0){
ret=0.0;
}else {
ret=Gamma.regularizedGammaP(epsilon,x/DEFAULT_EPSILON);
}
return ret;

Time : 17/08/24 14:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||Double.isNaN(a)){
ret=Double.NaN;
}else if(x>(a+1.0)/(a+b)){
ret=1.0-regularizedBeta(1.0-x,b,a,epsilon,maxIterations);
}else {
ContinuedFraction fraction=new ContinuedFraction(){
  @Override protected double getB(  int n,  double x){
    double ret;
    double m;
    if (n % 2 == 0) {
      m=n / 2.0;
      ret=(m * (b - m) * x) / ((a + (2 * m) - 1) * (a + (2 * m)));
    }
 else {
      m=(n - 1.0) / 2.0;
      ret=-((a + m) * (a + b + m) * x) / ((a + (2 * m)) * (a + (2 * m) + 1.0));
    }
    return ret;
  }
  @Override protected double getA(  int n,  double x){
    return 1.0;
  }
}
;
ret=Math.exp((a*Math.log(x))+(b*Math.log(1.0-x))-Math.log(a)-logBeta(a,b,epsilon,maxIterations))*1.0/fraction.evaluate(x,epsilon,maxIterations);
}
if(DEFAULT_EPSILON<0.5){
ret=DEFAULT_EPSILON;
}else {
ret=Double.MAX_VALUE;
}
return ret;

Time : 17/08/24 14:41
----------------------------------------
Thu Aug 24 14:54:01 AEST 2017 org.apache.commons.math.special.Beta,192
Thu Aug 24 14:57:13 AEST 2017 org.apache.commons.math.special.Beta,195
Thu Aug 24 14:57:13 AEST 2017 org.apache.commons.math.special.Beta,199
Thu Aug 24 15:00:28 AEST 2017 org.apache.commons.math.special.Beta,128
Thu Aug 24 15:00:31 AEST 2017 org.apache.commons.math.special.Beta,134
Thu Aug 24 15:01:31 AEST 2017 org.apache.commons.math.special.Beta,135
Thu Aug 24 15:01:32 AEST 2017 org.apache.commons.math.special.Beta,136
Thu Aug 24 15:01:33 AEST 2017 org.apache.commons.math.special.Beta,139
Thu Aug 24 15:01:35 AEST 2017 org.apache.commons.math.special.Beta,140
Thu Aug 24 15:01:36 AEST 2017 org.apache.commons.math.special.Beta,143
Thu Aug 24 15:03:49 AEST 2017 org.apache.commons.math.special.Beta,148
Thu Aug 24 15:03:55 AEST 2017 org.apache.commons.math.special.Gamma,97
Thu Aug 24 15:19:26 AEST 2017 org.apache.commons.math.special.Gamma,100
Timeout time : 17/08/24 15:22
