=================================================
Project : math_42	start : 17/08/24 05:16
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable | 17/08/24 05:17
Thu Aug 24 05:18:03 AEST 2017 org.apache.commons.math.optimization.RealPointValuePair,68
Thu Aug 24 05:19:05 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,347

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}

Time : 17/08/24 05:19
----------------------------------------
Thu Aug 24 05:21:23 AEST 2017 Thu Aug 24 05:21:23 AEST 2017 : org.apache.commons.math.optimization.linear.SimplexSolver,181=>Find no block
Thu Aug 24 05:21:24 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,332
Thu Aug 24 05:22:52 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,333

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 17/08/24 05:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 17/08/24 05:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 17/08/24 05:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 17/08/24 05:36
----------------------------------------
Thu Aug 24 05:39:24 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,336
Thu Aug 24 05:39:25 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,337
Thu Aug 24 05:39:26 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,338
Thu Aug 24 05:39:27 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,344

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 17/08/24 05:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}

Time : 17/08/24 05:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<NEGATIVE_VAR_COLUMN_LABEL.length();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 17/08/24 05:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 17/08/24 05:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 17/08/24 05:48
----------------------------------------
Thu Aug 24 05:50:29 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,345
Thu Aug 24 05:50:31 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,346
Thu Aug 24 05:50:32 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 17/08/24 05:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<getArtificialVariableOffset();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 17/08/24 05:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<NEGATIVE_VAR_COLUMN_LABEL.length();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 17/08/24 05:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables-1){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
i++;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 17/08/24 06:21
----------------------------------------
Thu Aug 24 06:26:16 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,352
Thu Aug 24 06:26:17 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,353
Thu Aug 24 06:26:18 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,354
Thu Aug 24 06:26:20 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,355
Thu Aug 24 06:26:21 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,356
Thu Aug 24 06:26:22 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,361
Thu Aug 24 06:33:28 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,362
Thu Aug 24 06:33:30 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,365
Thu Aug 24 06:43:28 AEST 2017 org.apache.commons.math.optimization.linear.SimplexTableau,366
Thu Aug 24 06:43:29 AEST 2017 Thu Aug 24 06:43:29 AEST 2017 : org.apache.commons.math.optimization.linear.SimplexTableau,367=>Find no block
Thu Aug 24 06:43:30 AEST 2017 org.apache.commons.math.util.MathUtils,330
Thu Aug 24 06:43:36 AEST 2017 Thu Aug 24 06:43:36 AEST 2017 : org.apache.commons.math.util.MathUtils,333=>Find no block
Thu Aug 24 06:43:37 AEST 2017 Thu Aug 24 06:43:37 AEST 2017 : org.apache.commons.math.linear.Array2DRowRealMatrix,73=>Find no block
Thu Aug 24 06:43:39 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,74
Thu Aug 24 06:43:44 AEST 2017 Thu Aug 24 06:43:44 AEST 2017 : org.apache.commons.math.linear.Array2DRowRealMatrix,75=>Find no block
Thu Aug 24 06:43:45 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

Time : 17/08/24 06:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,column);
}

Time : 17/08/24 07:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=i){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(i!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(nCols==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 07:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(data==null){
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}
if(column>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
MathUtils.checkNotNull(subMatrix);
 final int nRows=subMatrix.length;
if(nRows==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int nCols=subMatrix[0].length;
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}
}else {
super.setSubMatrix(subMatrix,row,column);
}

Time : 17/08/24 07:59
----------------------------------------
Thu Aug 24 08:06:36 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,262
Thu Aug 24 08:06:37 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,265
Thu Aug 24 08:06:38 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,268
Thu Aug 24 08:22:41 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,269
Thu Aug 24 08:35:26 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,270
Thu Aug 24 08:35:27 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,274
Thu Aug 24 08:48:30 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,275
Thu Aug 24 08:48:31 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 08:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nRows;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=i){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,column);
}

Time : 17/08/24 09:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(i!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(i!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(((i>>column)&1)!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(((i>>column)&1)==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nRows;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 17/08/24 09:46
----------------------------------------
Thu Aug 24 09:54:04 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,279
Thu Aug 24 09:54:05 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,280
Thu Aug 24 09:54:06 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,283
Thu Aug 24 09:54:07 AEST 2017 Thu Aug 24 09:54:07 AEST 2017 : org.apache.commons.math.linear.Array2DRowRealMatrix,285=>Find no block
Thu Aug 24 09:54:09 AEST 2017 Thu Aug 24 09:54:09 AEST 2017 : org.apache.commons.math.linear.Array2DRowRealMatrix,289=>Find no block
Thu Aug 24 09:54:11 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,525
Thu Aug 24 09:54:17 AEST 2017 Thu Aug 24 09:54:17 AEST 2017 : org.apache.commons.math.linear.Array2DRowRealMatrix,526=>Find no block
Thu Aug 24 09:54:18 AEST 2017 org.apache.commons.math.optimization.linear.SimplexSolver,174
Thu Aug 24 09:55:15 AEST 2017 Thu Aug 24 09:55:15 AEST 2017 : org.apache.commons.math.linear.AbstractRealMatrix,44=>Find no block
Thu Aug 24 09:55:16 AEST 2017 Thu Aug 24 09:55:16 AEST 2017 : org.apache.commons.math.optimization.RealPointValuePair,44=>Find no block
Thu Aug 24 09:55:17 AEST 2017 org.apache.commons.math.optimization.RealPointValuePair,45
Thu Aug 24 09:57:18 AEST 2017 org.apache.commons.math.optimization.RealPointValuePair,46
Thu Aug 24 09:57:19 AEST 2017 Thu Aug 24 09:57:19 AEST 2017 : org.apache.commons.math.optimization.RealPointValuePair,47=>Find no block
Thu Aug 24 09:57:20 AEST 2017 org.apache.commons.math.linear.ArrayRealVector,447

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<data.length;i++){
v.setEntry(i,dot);
dot+=data[i]*vData[i];
}

Time : 17/08/24 10:09
----------------------------------------
Timeout time : 17/08/24 10:18
