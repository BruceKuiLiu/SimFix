=================================================
Project : math_76	start : 17/08/24 05:17
Current failed test : org.apache.commons.math.linear.SingularValueSolverTest::testMath320B | 17/08/24 05:19
Thu Aug 24 05:20:05 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,283
Thu Aug 24 05:21:07 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,284
Thu Aug 24 05:21:11 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,288
Thu Aug 24 05:22:17 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,143
Thu Aug 24 05:24:32 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,182
Thu Aug 24 05:37:17 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,217
Thu Aug 24 05:37:36 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,220
Thu Aug 24 05:37:37 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,223
Thu Aug 24 05:37:54 AEST 2017 org.apache.commons.math.linear.MatrixUtils,202
Thu Aug 24 05:50:11 AEST 2017 org.apache.commons.math.linear.MatrixUtils,203
Thu Aug 24 06:03:19 AEST 2017 org.apache.commons.math.linear.MatrixUtils,204
Thu Aug 24 06:03:20 AEST 2017 org.apache.commons.math.linear.MatrixUtils,206
Thu Aug 24 06:03:22 AEST 2017 org.apache.commons.math.linear.MatrixUtils,633
Thu Aug 24 06:03:59 AEST 2017 Thu Aug 24 06:03:59 AEST 2017 : org.apache.commons.math.linear.MatrixUtils,640=>Find no block
Thu Aug 24 06:04:00 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,235
Thu Aug 24 06:04:05 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,252
Thu Aug 24 06:05:51 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,254
Thu Aug 24 06:05:52 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,255
Thu Aug 24 06:11:42 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,256

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int col=rowCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}

Time : 17/08/24 06:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int col=0;rowCount<rowCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}

Time : 17/08/24 06:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int col=0;rowCount<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}

Time : 17/08/24 06:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int col=0;rowCount<col;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}

Time : 17/08/24 06:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int col=columnCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}

Time : 17/08/24 06:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<columnCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=rowCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=rowCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;row<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=rowCount;row<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=columnCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;row<row;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=columnCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=columnCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=columnCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=columnCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;columnCount<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;columnCount<rowCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=rowCount;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;rowCount+1<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final int columnCount=getColumnDimension();
 final double[][] outData=new double[rowCount][columnCount];
for(int row=0;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=rowCount;rowCount+1<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}

Time : 17/08/24 06:51
----------------------------------------
Thu Aug 24 06:56:50 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,257
Thu Aug 24 06:56:51 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,258
Thu Aug 24 06:56:52 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,259
Thu Aug 24 06:56:53 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,260
Thu Aug 24 06:56:54 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,261
Thu Aug 24 06:56:55 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,262
Thu Aug 24 06:56:56 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,266

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<rowCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}
return new Array2DRowRealMatrix(outData,false);

Time : 17/08/24 06:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=rowCount;row<columnCount;row++){
 final double[] dataRow=data[row];
 final double[] mRow=m.data[row];
 final double[] outDataRow=outData[row];
for(int col=0;col<columnCount;col++){
outDataRow[col]=dataRow[col]-mRow[col];
}
}
return new Array2DRowRealMatrix(outData,false);

Time : 17/08/24 06:59
----------------------------------------
Timeout time : 17/08/24 07:00
Current failed test : org.apache.commons.math.linear.SingularValueSolverTest::testMath320A_purify_1 | 17/08/24 07:00
Thu Aug 24 07:00:51 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,283
Thu Aug 24 07:01:45 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,284
Thu Aug 24 07:01:46 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,288
Thu Aug 24 07:02:49 AEST 2017 org.apache.commons.math.linear.Array2DRowRealMatrix,439

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nRows;i<nCols;i++){
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nRows;i<nRows;i++){
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<nCols;i++){
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<nRows;i++){
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nRows;i<nCols;i++){
if(Double.isNaN(v[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nRows;i<nCols;i++){
if(Double.isInfinite(v[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nRows;i<nCols;i++){
if(Double.isNaN(v[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(Double.isInfinite(v[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<nCols-nRows;i++){
sum+=dataRow[i]*v[i];
}

Time : 17/08/24 07:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=nCols;row<nRows;row++){
 final double[] dataRow=data[row];
double sum=0;
for(int i=0;i<nCols;i++){
sum+=dataRow[i]*v[i];
}
out[row]=sum;
}

Time : 17/08/24 07:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=nCols;row<nRows;row++){
 final double[] dataRow=data[row];
double sum=0;
for(int i=row;i<nCols;i++){
sum+=dataRow[i]*v[i];
}
out[row]=sum;
}

Time : 17/08/24 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=nRows;row<nRows;row++){
 final double[] dataRow=data[row];
double sum=0;
for(int i=0;i<nCols;i++){
sum+=dataRow[i]*v[i];
}
out[row]=sum;
}

Time : 17/08/24 08:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=nCols;row<nRows;row++){
 final double[] dataRow=data[nCols];
double sum=0;
for(int i=0;i<nCols;i++){
sum+=dataRow[i]*v[i];
}
out[row]=sum;
}

Time : 17/08/24 08:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=nCols;row<nRows;row++){
 final double[] dataRow=data[row];
double sum=0;
for(int i=0;i<nCols;i++){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
out[row]=sum;
}

Time : 17/08/24 08:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int row=0;row<nRows;row++){
 final double[] dataRow=data[row];
double sum=0;
for(int i=nRows;i<nCols;i++){
sum+=dataRow[i]*v[i];
}
out[row]=sum;
}

Time : 17/08/24 08:36
----------------------------------------
Timeout time : 17/08/24 08:40
Current failed test : org.apache.commons.math.linear.SingularValueSolverTest::testMath320A_purify_4 | 17/08/24 08:40
Thu Aug 24 08:42:01 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,283
Thu Aug 24 08:43:09 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,284
Thu Aug 24 08:43:10 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,288
Thu Aug 24 08:44:33 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,143
Thu Aug 24 08:47:36 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,182
Thu Aug 24 09:04:39 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,217
Thu Aug 24 09:05:01 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,220
Thu Aug 24 09:05:02 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,223
Thu Aug 24 09:05:22 AEST 2017 org.apache.commons.math.linear.MatrixUtils,202
Thu Aug 24 09:20:54 AEST 2017 org.apache.commons.math.linear.MatrixUtils,203
Thu Aug 24 09:35:23 AEST 2017 org.apache.commons.math.linear.MatrixUtils,204
Thu Aug 24 09:35:24 AEST 2017 org.apache.commons.math.linear.MatrixUtils,206
Thu Aug 24 09:35:25 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,229
Thu Aug 24 09:37:06 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,168
Thu Aug 24 09:55:32 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,169
Thu Aug 24 09:55:34 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,170
Thu Aug 24 09:55:35 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,171
Thu Aug 24 09:55:36 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,172
Thu Aug 24 09:55:37 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,173
Thu Aug 24 09:55:38 AEST 2017 org.apache.commons.math.linear.SingularValueDecompositionImpl,174
Thu Aug 24 09:55:40 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,638
Thu Aug 24 09:56:42 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,639
Thu Aug 24 09:57:25 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,761
Thu Aug 24 10:00:13 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,762
Thu Aug 24 10:00:14 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,763
Thu Aug 24 10:01:56 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,764
Thu Aug 24 10:05:48 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,765
Thu Aug 24 10:10:05 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,768
Thu Aug 24 10:13:49 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,769
Thu Aug 24 10:21:18 AEST 2017 org.apache.commons.math.linear.EigenDecompositionImpl,770
Timeout time : 17/08/24 10:21
