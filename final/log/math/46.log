=================================================
Project : math_46	start : 17/08/23 23:27
Current failed test : org.apache.commons.math.complex.ComplexTest::testAtanI | 17/08/23 23:27
Wed Aug 23 23:28:05 AEST 2017 org.apache.commons.math.complex.Complex,260
Wed Aug 23 23:28:08 AEST 2017 org.apache.commons.math.complex.Complex,587
Wed Aug 23 23:29:30 AEST 2017 org.apache.commons.math.util.FastMath,1284
Wed Aug 23 23:30:16 AEST 2017 org.apache.commons.math.util.FastMath,1288

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 17/08/23 23:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(E>=TWO_POWER_52||E<=-TWO_POWER_52){
return pow(-x,E);
}
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 17/08/23 23:35
----------------------------------------
Wed Aug 23 23:36:53 AEST 2017 org.apache.commons.math.complex.Complex,583
Wed Aug 23 23:36:55 AEST 2017 org.apache.commons.math.util.FastMath,3004
Wed Aug 23 23:38:03 AEST 2017 org.apache.commons.math.util.FastMath,3005
Wed Aug 23 23:38:03 AEST 2017 org.apache.commons.math.complex.Complex,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}

Time : 17/08/23 23:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}

Time : 17/08/23 23:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}

Time : 17/08/23 23:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 17/08/23 23:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 17/08/23 23:44
----------------------------------------
Wed Aug 23 23:45:20 AEST 2017 org.apache.commons.math.complex.Complex,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/23 23:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(real)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<=FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.ulp(1.0)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.ulp(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.log(real)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:39
----------------------------------------
Thu Aug 24 00:41:24 AEST 2017 org.apache.commons.math.complex.Complex,277
Thu Aug 24 00:41:24 AEST 2017 org.apache.commons.math.complex.Complex,278
Thu Aug 24 00:41:25 AEST 2017 org.apache.commons.math.complex.Complex,122
Thu Aug 24 00:41:27 AEST 2017 org.apache.commons.math.complex.Complex,263
Thu Aug 24 00:41:29 AEST 2017 org.apache.commons.math.complex.Complex,267
Thu Aug 24 00:41:56 AEST 2017 org.apache.commons.math.complex.Complex,268

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 00:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<=FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.ulp(1.0)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.ulp(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 17/08/24 01:32
----------------------------------------
Thu Aug 24 01:33:51 AEST 2017 org.apache.commons.math.complex.Complex,270
Thu Aug 24 01:33:51 AEST 2017 org.apache.commons.math.complex.Complex,258
Thu Aug 24 01:33:52 AEST 2017 org.apache.commons.math.util.FastMath,1256
Thu Aug 24 01:34:31 AEST 2017 org.apache.commons.math.complex.Complex,754

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)){
return !isInfinite()?ZERO:NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

Time : 17/08/24 01:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isNaN){
return NaN;
}
if(real==0.0){
return isZero?NaN:INF;
}
if(Double.isInfinite(real)){
return !isInfinite()?ZERO:NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

Time : 17/08/24 01:36
----------------------------------------
Thu Aug 24 01:38:32 AEST 2017 org.apache.commons.math.complex.Complex,253
Thu Aug 24 01:39:20 AEST 2017 org.apache.commons.math.complex.Complex,254
Thu Aug 24 01:39:57 AEST 2017 org.apache.commons.math.util.FastMath,1269

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((bits&0x8000000000000000L)!=0||x==x){
if(x!=0.0){
if(hiPrec!=null){
hiPrec[0]=Double.NaN;
}
return Double.NaN;
}
}

Time : 17/08/24 01:49
----------------------------------------
Timeout time : 17/08/24 01:59
Current failed test : org.apache.commons.math.complex.ComplexTest::testDivideZero | 17/08/24 01:59
Thu Aug 24 02:00:34 AEST 2017 org.apache.commons.math.complex.Complex,1183
Thu Aug 24 02:00:50 AEST 2017 org.apache.commons.math.complex.Complex,260
Thu Aug 24 02:00:52 AEST 2017 org.apache.commons.math.complex.Complex,329
Thu Aug 24 02:01:30 AEST 2017 org.apache.commons.math.complex.Complex,258
Thu Aug 24 02:01:30 AEST 2017 org.apache.commons.math.complex.Complex,253
Thu Aug 24 02:02:42 AEST 2017 org.apache.commons.math.complex.Complex,254
Thu Aug 24 02:03:42 AEST 2017 org.apache.commons.math.complex.Complex,327
Thu Aug 24 02:05:32 AEST 2017 org.apache.commons.math.complex.Complex,328
Thu Aug 24 02:05:32 AEST 2017 org.apache.commons.math.complex.Complex,326
Thu Aug 24 02:05:32 AEST 2017 org.apache.commons.math.complex.Complex,323

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=other){
return true;
}

Time : 17/08/24 02:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=null){
return true;
}

Time : 17/08/24 02:08
----------------------------------------
Thu Aug 24 02:09:59 AEST 2017 Thu Aug 24 02:09:59 AEST 2017 : org.apache.commons.math.util.MathUtils,2337=>Find no block
Thu Aug 24 02:09:59 AEST 2017 org.apache.commons.math.util.MathUtils,2334
Thu Aug 24 02:10:01 AEST 2017 Thu Aug 24 02:10:01 AEST 2017 : org.apache.commons.math.complex.Complex,99=>Find no block
Thu Aug 24 02:10:01 AEST 2017 org.apache.commons.math.complex.Complex,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(imaginary)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 17/08/24 02:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(real);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 17/08/24 02:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 17/08/24 02:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 17/08/24 02:14
----------------------------------------
Thu Aug 24 02:16:33 AEST 2017 org.apache.commons.math.complex.Complex,101
Thu Aug 24 02:16:33 AEST 2017 org.apache.commons.math.complex.Complex,103
Thu Aug 24 02:16:33 AEST 2017 org.apache.commons.math.complex.Complex,104
Thu Aug 24 02:16:33 AEST 2017 org.apache.commons.math.complex.Complex,106
Thu Aug 24 02:16:33 AEST 2017 Thu Aug 24 02:16:33 AEST 2017 : org.apache.commons.math.complex.Complex,107=>Find no block
Thu Aug 24 02:16:33 AEST 2017 Thu Aug 24 02:16:33 AEST 2017 : org.apache.commons.math.util.MathUtils,2229=>Find no block
Thu Aug 24 02:16:34 AEST 2017 Thu Aug 24 02:16:34 AEST 2017 : org.apache.commons.math.util.MathUtils,2233=>Find no block
Thu Aug 24 02:16:34 AEST 2017 org.apache.commons.math.util.MathUtils,2235
Thu Aug 24 02:16:36 AEST 2017 org.apache.commons.math.util.MathUtils,2236
Thu Aug 24 02:16:40 AEST 2017 org.apache.commons.math.util.MathUtils,2238
Thu Aug 24 02:16:42 AEST 2017 org.apache.commons.math.util.MathUtils,2239
Thu Aug 24 02:16:46 AEST 2017 org.apache.commons.math.util.MathUtils,2242
Thu Aug 24 02:16:48 AEST 2017 org.apache.commons.math.util.MathUtils,2244
Thu Aug 24 02:16:50 AEST 2017 org.apache.commons.math.util.MathUtils,101
Thu Aug 24 02:16:52 AEST 2017 Thu Aug 24 02:16:52 AEST 2017 : org.apache.commons.math.util.MathUtils,102=>Find no block
Thu Aug 24 02:16:52 AEST 2017 org.apache.commons.math.util.MathUtils,115
Thu Aug 24 02:18:08 AEST 2017 org.apache.commons.math.util.MathUtils,116
Thu Aug 24 02:20:18 AEST 2017 org.apache.commons.math.util.MathUtils,117
Thu Aug 24 02:20:18 AEST 2017 org.apache.commons.math.util.MathUtils,119
Thu Aug 24 02:20:19 AEST 2017 org.apache.commons.math.util.MathUtils,133
Thu Aug 24 02:20:21 AEST 2017 org.apache.commons.math.util.MathUtils,149
Thu Aug 24 02:25:36 AEST 2017 org.apache.commons.math.util.MathUtils,151
Thu Aug 24 02:25:38 AEST 2017 org.apache.commons.math.util.MathUtils,155
Thu Aug 24 02:25:38 AEST 2017 org.apache.commons.math.util.MathUtils,156
Thu Aug 24 02:25:38 AEST 2017 org.apache.commons.math.util.MathUtils,158
Thu Aug 24 02:25:38 AEST 2017 org.apache.commons.math.util.MathUtils,159
Thu Aug 24 02:25:38 AEST 2017 org.apache.commons.math.util.MathUtils,161
Thu Aug 24 02:25:39 AEST 2017 org.apache.commons.math.util.MathUtils,165
Thu Aug 24 02:25:39 AEST 2017 org.apache.commons.math.util.MathUtils,172
Thu Aug 24 02:25:39 AEST 2017 org.apache.commons.math.util.MathUtils,173
Thu Aug 24 02:25:39 AEST 2017 org.apache.commons.math.util.MathUtils,175
Thu Aug 24 02:25:39 AEST 2017 org.apache.commons.math.util.MathUtils,179
Thu Aug 24 02:26:46 AEST 2017 org.apache.commons.math.util.MathUtils,208
Thu Aug 24 02:37:28 AEST 2017 org.apache.commons.math.util.MathUtils,209
Thu Aug 24 02:47:57 AEST 2017 org.apache.commons.math.util.MathUtils,210
Thu Aug 24 02:47:57 AEST 2017 org.apache.commons.math.util.MathUtils,212
Thu Aug 24 02:59:49 AEST 2017 org.apache.commons.math.util.MathUtils,213
Thu Aug 24 02:59:49 AEST 2017 org.apache.commons.math.util.MathUtils,216
Thu Aug 24 03:07:26 AEST 2017 org.apache.commons.math.util.MathUtils,217
Thu Aug 24 03:07:26 AEST 2017 org.apache.commons.math.util.MathUtils,225
Thu Aug 24 03:18:01 AEST 2017 org.apache.commons.math.util.MathUtils,226
Thu Aug 24 04:15:46 AEST 2017 org.apache.commons.math.util.MathUtils,228
Thu Aug 24 04:27:07 AEST 2017 org.apache.commons.math.util.MathUtils,229
Thu Aug 24 04:27:07 AEST 2017 org.apache.commons.math.util.MathUtils,230
Thu Aug 24 04:27:07 AEST 2017 org.apache.commons.math.util.MathUtils,231
Thu Aug 24 04:27:07 AEST 2017 org.apache.commons.math.util.MathUtils,233
Thu Aug 24 04:27:07 AEST 2017 org.apache.commons.math.util.MathUtils,236
Timeout time : 17/08/24 04:30
