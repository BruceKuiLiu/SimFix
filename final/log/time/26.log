=================================================
Project : time_26	start : 17/08/24 17:48
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange_purify_2 | 17/08/24 17:55
Thu Aug 24 17:57:34 AEST 2017 org.joda.time.DateTime,1678
Thu Aug 24 17:58:40 AEST 2017 Thu Aug 24 17:58:40 AEST 2017 : org.joda.time.DateTime,220=>Find no block
Thu Aug 24 17:58:40 AEST 2017 org.joda.time.DateTime,219
Thu Aug 24 17:59:38 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2686
Thu Aug 24 18:06:33 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2687
Thu Aug 24 18:06:33 AEST 2017 org.joda.time.format.DateTimeParserBucket,335
Thu Aug 24 18:08:01 AEST 2017 org.joda.time.format.DateTimeParserBucket,336
Thu Aug 24 18:08:01 AEST 2017 Thu Aug 24 18:08:01 AEST 2017 : org.joda.time.base.BaseDateTime,151=>Find no block
Thu Aug 24 18:08:01 AEST 2017 org.joda.time.base.BaseDateTime,148
Thu Aug 24 18:14:34 AEST 2017 org.joda.time.base.BaseDateTime,149
Thu Aug 24 18:14:34 AEST 2017 org.joda.time.base.BaseDateTime,150
Thu Aug 24 18:14:35 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2243
Timeout time : 17/08/24 18:27
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW_purify_8 | 17/08/24 18:27
Thu Aug 24 18:30:09 AEST 2017 org.joda.time.DateTime,1646
Thu Aug 24 18:31:19 AEST 2017 org.joda.time.DateTime,518
Thu Aug 24 18:34:54 AEST 2017 org.joda.time.DateTime,519
Thu Aug 24 18:40:42 AEST 2017 org.joda.time.DateTime,522
Thu Aug 24 18:40:43 AEST 2017 org.joda.time.base.AbstractInstant,177
Thu Aug 24 18:40:44 AEST 2017 org.joda.time.tz.ZoneInfoProvider,162
Thu Aug 24 18:42:07 AEST 2017 org.joda.time.chrono.GregorianChronology,171
Thu Aug 24 18:42:09 AEST 2017 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 17/08/24 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNameKey==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 18:57
----------------------------------------
Thu Aug 24 18:58:00 AEST 2017 org.joda.time.chrono.BasicChronology,144
Thu Aug 24 18:59:25 AEST 2017 org.joda.time.chrono.GregorianChronology,100
Timeout time : 17/08/24 19:00
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW_purify_9 | 17/08/24 19:00
Thu Aug 24 19:02:26 AEST 2017 org.joda.time.DateTime,1694
Thu Aug 24 19:03:37 AEST 2017 org.joda.time.DateTime,518

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 17/08/24 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 17/08/24 19:05
----------------------------------------
Thu Aug 24 19:08:08 AEST 2017 org.joda.time.DateTime,519

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==chronology){
return this;
}

Time : 17/08/24 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
return this;
}

Time : 17/08/24 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
throw new IllegalArgumentException("The field type must not be null");
}

Time : 17/08/24 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
throw new IllegalArgumentException("Types array must not be null");
}

Time : 17/08/24 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}

Time : 17/08/24 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}

Time : 17/08/24 19:16
----------------------------------------
Thu Aug 24 19:17:04 AEST 2017 org.joda.time.DateTime,522
Thu Aug 24 19:17:04 AEST 2017 org.joda.time.base.AbstractInstant,177
Thu Aug 24 19:17:06 AEST 2017 org.joda.time.tz.ZoneInfoProvider,162
Thu Aug 24 19:18:35 AEST 2017 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 17/08/24 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
millis=serialVersionUID;
if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 19:32
----------------------------------------
Timeout time : 17/08/24 19:32
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral_purify_6 | 17/08/24 19:32
Thu Aug 24 19:34:54 AEST 2017 org.joda.time.DateTime,1646
Thu Aug 24 19:36:14 AEST 2017 org.joda.time.DateTime,518
Thu Aug 24 19:39:47 AEST 2017 org.joda.time.DateTime,519
Thu Aug 24 19:45:22 AEST 2017 org.joda.time.DateTime,522
Thu Aug 24 19:45:22 AEST 2017 org.joda.time.base.AbstractInstant,177
Thu Aug 24 19:45:24 AEST 2017 org.joda.time.tz.ZoneInfoProvider,162
Thu Aug 24 19:46:55 AEST 2017 org.joda.time.chrono.GregorianChronology,171
Thu Aug 24 19:46:56 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2093
Thu Aug 24 19:59:26 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2094
Thu Aug 24 19:59:26 AEST 2017 org.joda.time.tz.CachedDateTimeZone,210
Timeout time : 17/08/24 20:04
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral_purify_7 | 17/08/24 20:04
Thu Aug 24 20:07:15 AEST 2017 org.joda.time.DateTime,1694
Thu Aug 24 20:08:28 AEST 2017 org.joda.time.DateTime,518

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 17/08/24 20:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 17/08/24 20:10
----------------------------------------
Thu Aug 24 20:13:00 AEST 2017 org.joda.time.DateTime,519

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==chronology){
return this;
}

Time : 17/08/24 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
return this;
}

Time : 17/08/24 20:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
throw new IllegalArgumentException("The field type must not be null");
}

Time : 17/08/24 20:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
throw new IllegalArgumentException("Types array must not be null");
}

Time : 17/08/24 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}

Time : 17/08/24 20:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}

Time : 17/08/24 20:21
----------------------------------------
Thu Aug 24 20:21:44 AEST 2017 org.joda.time.DateTime,522
Thu Aug 24 20:21:46 AEST 2017 org.joda.time.base.AbstractInstant,177
Thu Aug 24 20:21:48 AEST 2017 org.joda.time.tz.ZoneInfoProvider,162
Thu Aug 24 20:23:17 AEST 2017 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 17/08/24 20:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
millis=serialVersionUID;
if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 20:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 20:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 17/08/24 20:37
----------------------------------------
Timeout time : 17/08/24 20:37
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange_purify_2 | 17/08/24 20:37
Thu Aug 24 20:40:05 AEST 2017 org.joda.time.DateTime,1646
Thu Aug 24 20:41:16 AEST 2017 Thu Aug 24 20:41:16 AEST 2017 : org.joda.time.DateTime,220=>Find no block
Thu Aug 24 20:41:17 AEST 2017 org.joda.time.DateTime,219
Thu Aug 24 20:42:26 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2686
Thu Aug 24 20:50:35 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2687
Thu Aug 24 20:50:37 AEST 2017 org.joda.time.format.DateTimeParserBucket,335
Thu Aug 24 20:52:21 AEST 2017 org.joda.time.format.DateTimeParserBucket,336
Thu Aug 24 20:52:21 AEST 2017 Thu Aug 24 20:52:21 AEST 2017 : org.joda.time.base.BaseDateTime,151=>Find no block
Thu Aug 24 20:52:21 AEST 2017 org.joda.time.base.BaseDateTime,148
Thu Aug 24 20:59:57 AEST 2017 org.joda.time.base.BaseDateTime,149
Thu Aug 24 20:59:57 AEST 2017 org.joda.time.base.BaseDateTime,150
Thu Aug 24 20:59:57 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2243
Timeout time : 17/08/24 21:10
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter_purify_2 | 17/08/24 21:10
Thu Aug 24 21:12:53 AEST 2017 org.joda.time.DateTime,1694
Thu Aug 24 21:14:09 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2241
Timeout time : 17/08/24 21:42
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone_purify_4 | 17/08/24 21:42
Thu Aug 24 21:45:20 AEST 2017 org.joda.time.DateTime,1662
Thu Aug 24 21:46:29 AEST 2017 org.joda.time.DateTime,285
Thu Aug 24 21:47:04 AEST 2017 Thu Aug 24 21:47:04 AEST 2017 : org.joda.time.DateTime,287=>Find no block
Thu Aug 24 21:47:05 AEST 2017 org.joda.time.DateTimeZone,266

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hoursInMinutes<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 17/08/24 21:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hoursOffset<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 17/08/24 21:50
----------------------------------------
Thu Aug 24 21:51:07 AEST 2017 org.joda.time.DateTimeZone,254
Thu Aug 24 21:51:58 AEST 2017 org.joda.time.DateTimeZone,257
Thu Aug 24 21:52:41 AEST 2017 org.joda.time.DateTimeZone,260

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
hoursOffset-=2;
if(minutesOffset<0||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
int offset=0;

Time : 17/08/24 22:04
----------------------------------------
Thu Aug 24 22:07:48 AEST 2017 org.joda.time.DateTimeZone,262

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int hoursInMinutes=FieldUtils.safeMultiply(hoursOffset,60);
if(hoursInMinutes<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 17/08/24 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int hoursInMinutes=FieldUtils.safeMultiply(hoursOffset,60);
if(hoursOffset<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 17/08/24 22:11
----------------------------------------
Thu Aug 24 22:12:30 AEST 2017 org.joda.time.DateTimeZone,263
Thu Aug 24 22:12:31 AEST 2017 org.joda.time.DateTimeZone,268

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hoursInMinutes<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}
offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);

Time : 17/08/24 22:14
----------------------------------------
Timeout time : 17/08/24 22:15
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_purify_2 | 17/08/24 22:15
Thu Aug 24 22:18:02 AEST 2017 org.joda.time.DateTime,1662
Thu Aug 24 22:19:15 AEST 2017 Thu Aug 24 22:19:15 AEST 2017 : org.joda.time.DateTime,220=>Find no block
Thu Aug 24 22:19:16 AEST 2017 org.joda.time.DateTime,219
Thu Aug 24 22:20:29 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2686
Thu Aug 24 22:28:50 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2687
Thu Aug 24 22:28:50 AEST 2017 org.joda.time.format.DateTimeParserBucket,335
Thu Aug 24 22:30:39 AEST 2017 org.joda.time.format.DateTimeParserBucket,336
Thu Aug 24 22:30:40 AEST 2017 Thu Aug 24 22:30:40 AEST 2017 : org.joda.time.base.BaseDateTime,151=>Find no block
Thu Aug 24 22:30:40 AEST 2017 org.joda.time.base.BaseDateTime,148
Thu Aug 24 22:38:40 AEST 2017 org.joda.time.base.BaseDateTime,149
Thu Aug 24 22:38:40 AEST 2017 org.joda.time.base.BaseDateTime,150
Thu Aug 24 22:38:40 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2243
Timeout time : 17/08/24 22:48
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer_purify_2 | 17/08/24 22:48
Thu Aug 24 22:50:36 AEST 2017 org.joda.time.DateTime,1694
Thu Aug 24 22:51:51 AEST 2017 Thu Aug 24 22:51:51 AEST 2017 : org.joda.time.DateTime,220=>Find no block
Thu Aug 24 22:51:51 AEST 2017 org.joda.time.DateTime,219
Thu Aug 24 22:53:08 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2686
Thu Aug 24 23:02:06 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2687
Thu Aug 24 23:02:07 AEST 2017 org.joda.time.format.DateTimeParserBucket,335
Thu Aug 24 23:04:08 AEST 2017 org.joda.time.format.DateTimeParserBucket,336
Thu Aug 24 23:04:09 AEST 2017 Thu Aug 24 23:04:09 AEST 2017 : org.joda.time.base.BaseDateTime,151=>Find no block
Thu Aug 24 23:04:09 AEST 2017 org.joda.time.base.BaseDateTime,148
Thu Aug 24 23:12:16 AEST 2017 org.joda.time.base.BaseDateTime,149
Thu Aug 24 23:12:16 AEST 2017 org.joda.time.base.BaseDateTime,150
Thu Aug 24 23:12:16 AEST 2017 org.joda.time.format.DateTimeFormatterBuilder,2243
Timeout time : 17/08/24 23:20
