=================================================
Project : closure_90	start : 17/08/24 04:29
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9 | 17/08/24 04:30
Thu Aug 24 05:16:55 AEST 2017 com.google.javascript.jscomp.FunctionTypeBuilder,186
Thu Aug 24 05:20:28 AEST 2017 com.google.javascript.jscomp.FunctionTypeBuilder,187
Thu Aug 24 05:20:29 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1468
Thu Aug 24 06:42:33 AEST 2017 com.google.javascript.jscomp.BasicErrorManager,162
Timeout time : 17/08/24 07:47
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8 | 17/08/24 07:47
Thu Aug 24 08:33:58 AEST 2017 com.google.javascript.jscomp.FunctionTypeBuilder,186
Thu Aug 24 08:37:32 AEST 2017 com.google.javascript.jscomp.FunctionTypeBuilder,187
Thu Aug 24 08:37:33 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1468
Thu Aug 24 09:22:07 AEST 2017 com.google.javascript.jscomp.BasicErrorManager,162
Thu Aug 24 09:44:33 AEST 2017 com.google.javascript.rhino.jstype.ProxyObjectType,76
Thu Aug 24 09:44:36 AEST 2017 com.google.javascript.rhino.jstype.NamedType,298
Thu Aug 24 09:45:28 AEST 2017 com.google.javascript.rhino.jstype.ProxyObjectType,183
Thu Aug 24 09:46:05 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1449
Thu Aug 24 09:54:36 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1450
Thu Aug 24 09:54:36 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1457
Thu Aug 24 09:58:30 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1459
Thu Aug 24 10:07:04 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1460
Thu Aug 24 10:08:45 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1466

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.CALL){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()!=Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()!=Token.CALL){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(candidate.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(candidate.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.CALL){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(candidate.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()!=Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(candidate.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(candidate.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()!=Token.CALL){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!NodeUtil.isStatementBlock(candidate.getParent())){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!NodeUtil.isName(candidate)){
return ;
}
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!NodeUtil.isName(candidate)){
return ;
}
if(realType!=null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
if(t.inGlobalScope()){
return ;
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
new ControlFlowAnalysis(compiler,false).process(null,t.getScopeRoot().getLastChild());
if(realType==null){
compiler.report(JSError.make(t.getSourceName(),candidate,MALFORMED_TYPEDEF,typedef));
}
if(t.inGlobalScope()){
return ;
}
typeRegistry.overwriteDeclaredType(typedef,realType);
if(candidate.getType()==Token.GETPROP){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}

Time : 17/08/24 10:54
----------------------------------------
Thu Aug 24 10:58:17 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,1467
Thu Aug 24 10:58:17 AEST 2017 Thu Aug 24 10:58:17 AEST 2017 : com.google.javascript.jscomp.TypedScopeCreator,1471=>Find no block
Thu Aug 24 10:58:18 AEST 2017 com.google.javascript.jscomp.TypedScopeCreator,312
Thu Aug 24 10:59:30 AEST 2017 com.google.javascript.rhino.jstype.NamedType,134
Thu Aug 24 10:59:32 AEST 2017 com.google.javascript.jscomp.JSError,189
Thu Aug 24 10:59:35 AEST 2017 com.google.javascript.rhino.JSDocInfo,963
Thu Aug 24 11:00:16 AEST 2017 com.google.javascript.jscomp.FunctionTypeBuilder,412

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(info!=null&&info.hasEnumParameterType()){
maybeThisType=ObjectType.cast(info.getThisType().evaluate(scope,typeRegistry));
}

Time : 17/08/24 11:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(ObjectType.cast(returnType)!=null&&info.hasThisType()){
maybeThisType=ObjectType.cast(info.getThisType().evaluate(scope,typeRegistry));
}

Time : 17/08/24 11:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(info!=null&&info.hasType()){
maybeThisType=ObjectType.cast(info.getThisType().evaluate(scope,typeRegistry));
}

Time : 17/08/24 11:03
----------------------------------------
Timeout time : 17/08/24 11:05
