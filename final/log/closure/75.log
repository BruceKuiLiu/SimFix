=================================================
Project : closure_75	start : 17/08/23 22:44
Current failed test : com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString | 17/08/23 22:45
Wed Aug 23 23:11:40 AEST 2017 com.google.javascript.rhino.Node,1371
Wed Aug 23 23:13:27 AEST 2017 com.google.javascript.rhino.Node,1400
Wed Aug 23 23:14:38 AEST 2017 com.google.javascript.rhino.Node,1413
Wed Aug 23 23:14:43 AEST 2017 Wed Aug 23 23:14:43 AEST 2017 : com.google.javascript.rhino.Node,2247=>Find no block
Wed Aug 23 23:14:45 AEST 2017 com.google.javascript.rhino.Node,2248
Wed Aug 23 23:14:49 AEST 2017 com.google.javascript.rhino.Node,2249
Wed Aug 23 23:14:49 AEST 2017 Wed Aug 23 23:14:49 AEST 2017 : com.google.javascript.rhino.Node,2250=>Find no block
Wed Aug 23 23:14:50 AEST 2017 com.google.javascript.jscomp.NodeUtil,375
Wed Aug 23 23:14:59 AEST 2017 com.google.javascript.jscomp.NodeUtil,364
Wed Aug 23 23:21:07 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,355
Wed Aug 23 23:55:39 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,357
Wed Aug 23 23:55:39 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,358
Wed Aug 23 23:55:40 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,359
Wed Aug 23 23:55:40 AEST 2017 com.google.javascript.jscomp.NodeUtil,301
Thu Aug 24 00:10:35 AEST 2017 com.google.javascript.jscomp.NodeUtil,315
Thu Aug 24 00:15:22 AEST 2017 com.google.javascript.jscomp.NodeUtil,317
Thu Aug 24 00:19:53 AEST 2017 com.google.javascript.jscomp.NodeUtil,321
Thu Aug 24 00:30:36 AEST 2017 com.google.javascript.jscomp.NodeUtil,332
Thu Aug 24 00:38:29 AEST 2017 com.google.javascript.jscomp.NodeUtil,342
Thu Aug 24 00:51:25 AEST 2017 com.google.javascript.jscomp.NodeUtil,349
Thu Aug 24 01:03:13 AEST 2017 com.google.javascript.jscomp.NodeUtil,356
Thu Aug 24 01:29:58 AEST 2017 com.google.javascript.jscomp.NodeUtil,357
Thu Aug 24 01:29:59 AEST 2017 Thu Aug 24 01:29:59 AEST 2017 : com.google.javascript.jscomp.NodeUtil,359=>Find no block
Thu Aug 24 01:30:00 AEST 2017 Thu Aug 24 01:30:00 AEST 2017 : com.google.javascript.jscomp.NodeUtil,363=>Find no block
Thu Aug 24 01:30:01 AEST 2017 com.google.javascript.jscomp.NodeUtil,366
Thu Aug 24 01:30:01 AEST 2017 Thu Aug 24 01:30:01 AEST 2017 : com.google.javascript.jscomp.NodeUtil,373=>Find no block
Thu Aug 24 01:30:02 AEST 2017 com.google.javascript.jscomp.NodeUtil,387
Thu Aug 24 01:31:11 AEST 2017 com.google.javascript.jscomp.CodeGenerator,1019
Thu Aug 24 01:37:06 AEST 2017 com.google.javascript.jscomp.CodeGenerator,1128
Thu Aug 24 01:37:09 AEST 2017 Thu Aug 24 01:37:09 AEST 2017 : com.google.javascript.jscomp.CodeGenerator,1132=>Find no block
Thu Aug 24 01:37:10 AEST 2017 Thu Aug 24 01:37:10 AEST 2017 : com.google.javascript.jscomp.CodeGenerator,1133=>Find no block
Thu Aug 24 01:37:11 AEST 2017 com.google.javascript.jscomp.CodeGenerator,1145
Thu Aug 24 01:38:46 AEST 2017 com.google.javascript.jscomp.CodeGenerator,1155
Thu Aug 24 01:47:22 AEST 2017 Thu Aug 24 01:47:22 AEST 2017 : com.google.javascript.jscomp.CodeGenerator,1160=>Find no block
Thu Aug 24 01:47:23 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.RETURN){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 02:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.RETURN){
return ;
}
if(value!=Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 02:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 02:14
----------------------------------------
Thu Aug 24 02:18:17 AEST 2017 com.google.javascript.jscomp.NodeUtil,2141
Thu Aug 24 02:18:26 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(result!=null){
return ;
}
double value=result;
Node replacement;

Time : 17/08/24 02:19
----------------------------------------
Thu Aug 24 02:23:16 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,253

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 02:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.CALL){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 02:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 03:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.NAME){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 17/08/24 03:24
----------------------------------------
Thu Aug 24 03:33:33 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,255
Thu Aug 24 03:33:34 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,257
Thu Aug 24 03:33:35 AEST 2017 com.google.javascript.jscomp.PeepholeFoldConstants,264

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
n.getParent().replaceChild(n,replacement);

Time : 17/08/24 03:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.RETURN){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 17/08/24 03:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.CALL){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 17/08/24 04:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(replacement.getType()!=Token.STRING){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 17/08/24 04:07
----------------------------------------
Timeout time : 17/08/24 04:11
