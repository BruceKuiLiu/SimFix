=================================================
Project : lang_10	start : 17/08/23 21:40
Current failed test : org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831 | 17/08/23 21:40
Wed Aug 23 21:40:50 AEST 2017 org.apache.commons.lang3.time.FastDateParser,180
Wed Aug 23 21:40:50 AEST 2017 org.apache.commons.lang3.time.FastDateParser,685

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<=field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 17/08/23 21:48
----------------------------------------
Wed Aug 23 21:55:23 AEST 2017 org.apache.commons.lang3.time.FastDateParser,686
Wed Aug 23 21:55:23 AEST 2017 org.apache.commons.lang3.time.FastDateParser,687
Wed Aug 23 21:55:23 AEST 2017 org.apache.commons.lang3.time.FastDateParser,696
Wed Aug 23 22:03:58 AEST 2017 Wed Aug 23 22:03:58 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,697=>Find no block
Wed Aug 23 22:03:58 AEST 2017 org.apache.commons.lang3.time.FastDateParser,395
Wed Aug 23 22:04:07 AEST 2017 org.apache.commons.lang3.time.FastDateParser,396
Wed Aug 23 22:04:08 AEST 2017 org.apache.commons.lang3.time.FastDateParser,555
Wed Aug 23 22:04:10 AEST 2017 Wed Aug 23 22:04:10 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,850=>Find no block
Wed Aug 23 22:04:10 AEST 2017 org.apache.commons.lang3.time.FastDateParser,382
Wed Aug 23 22:05:10 AEST 2017 Wed Aug 23 22:05:10 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,383=>Find no block
Wed Aug 23 22:05:10 AEST 2017 org.apache.commons.lang3.time.FastDateParser,406
Wed Aug 23 22:05:26 AEST 2017 org.apache.commons.lang3.time.FastDateParser,407
Wed Aug 23 22:05:27 AEST 2017 org.apache.commons.lang3.time.FastDateParser,434
Wed Aug 23 22:05:28 AEST 2017 org.apache.commons.lang3.time.FastDateParser,435
Wed Aug 23 22:05:28 AEST 2017 org.apache.commons.lang3.time.FastDateParser,436
Wed Aug 23 22:05:28 AEST 2017 org.apache.commons.lang3.time.FastDateParser,437
Wed Aug 23 22:05:28 AEST 2017 org.apache.commons.lang3.time.FastDateParser,446

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 17/08/23 22:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 17/08/23 22:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 17/08/23 22:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 17/08/23 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("The field must not be null");
}

Time : 17/08/23 22:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException(value+" is not a supported timezone name");
}

Time : 17/08/23 22:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("target object must not be null");
}

Time : 17/08/23 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("Requested random string length "+count);
}

Time : 17/08/23 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("Arguments cannot both be null");
}

Time : 17/08/23 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IndexOutOfBoundsException();
}

Time : 17/08/23 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("Array cannot be empty.");
}

Time : 17/08/23 22:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("Array is empty");
}

Time : 17/08/23 22:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
throw new IllegalArgumentException("The chars array must not be empty");
}

Time : 17/08/23 22:13
----------------------------------------
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,447
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,448
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,449
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,450
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,454
Wed Aug 23 22:16:31 AEST 2017 org.apache.commons.lang3.time.FastDateParser,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 17/08/23 22:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 17/08/23 22:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>=0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}

Time : 17/08/23 22:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 17/08/23 22:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
offset--;
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 17/08/23 22:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}

Time : 17/08/23 22:22
----------------------------------------
Wed Aug 23 22:22:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,466
Wed Aug 23 22:22:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,467
Wed Aug 23 22:22:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,468
Wed Aug 23 22:22:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,469
Wed Aug 23 22:22:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return offset;

Time : 17/08/23 22:23
----------------------------------------
Wed Aug 23 22:24:11 AEST 2017 org.apache.commons.lang3.time.FastDateParser,672

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new NullPointerException("Cannot get the toString of a null identity");
}

Time : 17/08/23 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 17/08/23 22:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 17/08/23 22:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 17/08/23 22:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 17/08/23 22:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("The date must not be null");
}

Time : 17/08/23 22:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException();
}

Time : 17/08/23 22:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new NullPointerException("Cannot get the toString of a null identity");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("Invalid pattern");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("Strings must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<0){
throw new IllegalArgumentException("Threshold must not be negative");
}
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("Strings must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("The Writer must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException("length must be valid");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("The date must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException(field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException();
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IndexOutOfBoundsException("Index: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalStateException("Aborting to protect against StackOverflowError - "+"output of one loop is the input of another");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("Array cannot be empty.");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("Array is empty");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException("Invalid startIndex: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException("Invalid offset: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IllegalArgumentException("The chars array must not be empty");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
throw new IndexOutOfBoundsException();
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 17/08/23 22:41
----------------------------------------
Wed Aug 23 22:41:39 AEST 2017 org.apache.commons.lang3.time.FastDateParser,673
Wed Aug 23 22:41:39 AEST 2017 org.apache.commons.lang3.time.FastDateParser,674
Wed Aug 23 22:41:39 AEST 2017 org.apache.commons.lang3.time.FastDateParser,676
Wed Aug 23 22:41:39 AEST 2017 org.apache.commons.lang3.time.FastDateParser,677
Wed Aug 23 22:41:39 AEST 2017 org.apache.commons.lang3.time.FastDateParser,379
Wed Aug 23 22:41:40 AEST 2017 org.apache.commons.lang3.time.FastDateParser,380
Wed Aug 23 22:41:40 AEST 2017 org.apache.commons.lang3.time.FastDateParser,381
Wed Aug 23 22:41:41 AEST 2017 org.apache.commons.lang3.time.FastDateParser,411
Wed Aug 23 22:41:46 AEST 2017 Wed Aug 23 22:41:46 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,357=>Find no block
Wed Aug 23 22:41:46 AEST 2017 org.apache.commons.lang3.time.FastDateParser,358
Wed Aug 23 22:42:02 AEST 2017 org.apache.commons.lang3.time.FastDateParser,359
Wed Aug 23 22:42:02 AEST 2017 Wed Aug 23 22:42:02 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,360=>Find no block
Wed Aug 23 22:42:02 AEST 2017 Wed Aug 23 22:42:02 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,369=>Find no block
Wed Aug 23 22:42:02 AEST 2017 org.apache.commons.lang3.time.FastDatePrinter,213
Wed Aug 23 22:42:41 AEST 2017 org.apache.commons.lang3.time.FastDatePrinter,215
Wed Aug 23 22:45:46 AEST 2017 org.apache.commons.lang3.time.FastDatePrinter,762
Wed Aug 23 22:45:47 AEST 2017 org.apache.commons.lang3.time.FastDateParser,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}

Time : 17/08/23 22:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Date date=parse(source,new ParsePosition(0));
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}
return date;

Time : 17/08/23 22:48
----------------------------------------
Wed Aug 23 22:48:55 AEST 2017 org.apache.commons.lang3.time.FastDateParser,251
Wed Aug 23 22:48:55 AEST 2017 org.apache.commons.lang3.time.FastDateParser,260
Wed Aug 23 22:48:55 AEST 2017 org.apache.commons.lang3.time.FastDateParser,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField==null){
return null;
}
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(!matcher.lookingAt()){
return null;
}

Time : 17/08/23 22:49
----------------------------------------
Wed Aug 23 22:50:32 AEST 2017 org.apache.commons.lang3.time.FastDateParser,277
Wed Aug 23 22:50:33 AEST 2017 org.apache.commons.lang3.time.FastDateParser,278
Wed Aug 23 22:50:54 AEST 2017 org.apache.commons.lang3.time.FastDateParser,282

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
pos.setIndex(offset+matcher.end());
if(!matcher.lookingAt()){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 17/08/23 22:51
----------------------------------------
Wed Aug 23 22:52:36 AEST 2017 org.apache.commons.lang3.time.FastDateParser,283

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 17/08/23 22:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 17/08/23 22:55
----------------------------------------
Wed Aug 23 22:56:37 AEST 2017 org.apache.commons.lang3.time.FastDateParser,285

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 17/08/23 22:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 17/08/23 22:59
----------------------------------------
Wed Aug 23 23:02:08 AEST 2017 org.apache.commons.lang3.time.FastDateParser,286
Wed Aug 23 23:02:08 AEST 2017 org.apache.commons.lang3.time.FastDateParser,287
Wed Aug 23 23:02:08 AEST 2017 Wed Aug 23 23:02:08 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,288=>Find no block
Wed Aug 23 23:02:08 AEST 2017 org.apache.commons.lang3.time.FastDateParser,289

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 17/08/23 23:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 17/08/23 23:05
----------------------------------------
Wed Aug 23 23:09:09 AEST 2017 org.apache.commons.lang3.time.FastDateParser,290
Wed Aug 23 23:09:09 AEST 2017 org.apache.commons.lang3.time.FastDateParser,741
Wed Aug 23 23:09:23 AEST 2017 Wed Aug 23 23:09:23 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,742=>Find no block
Wed Aug 23 23:09:24 AEST 2017 org.apache.commons.lang3.time.FastDateParser,308
Wed Aug 23 23:09:41 AEST 2017 org.apache.commons.lang3.time.FastDateParser,309
Wed Aug 23 23:09:41 AEST 2017 org.apache.commons.lang3.time.FastDateParser,310
Wed Aug 23 23:09:41 AEST 2017 org.apache.commons.lang3.time.FastDatePrinter,235
Wed Aug 23 23:10:01 AEST 2017 org.apache.commons.lang3.time.FastDatePrinter,236
Wed Aug 23 23:10:02 AEST 2017 org.apache.commons.lang3.time.FastDateParser,565
Wed Aug 23 23:13:00 AEST 2017 org.apache.commons.lang3.time.FastDateParser,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentStrategy.addRegex(this,regex)){
throw new IllegalArgumentException("Invalid pattern");
}

Time : 17/08/23 23:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
}

Time : 17/08/23 23:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
throw new IllegalArgumentException("Invalid pattern");
}

Time : 17/08/23 23:14
----------------------------------------
Wed Aug 23 23:14:49 AEST 2017 org.apache.commons.lang3.time.FastDateParser,314

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
wasWhite=!Character.isDigit(c);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}
wasWhite=false;

Time : 17/08/23 23:16
----------------------------------------
Wed Aug 23 23:17:29 AEST 2017 Wed Aug 23 23:17:29 AEST 2017 : org.apache.commons.lang3.time.FastDateParser,315=>Find no block
Wed Aug 23 23:17:29 AEST 2017 org.apache.commons.lang3.time.FastDateParser,340
Wed Aug 23 23:22:46 AEST 2017 org.apache.commons.lang3.time.FastDateParser,621
Wed Aug 23 23:24:52 AEST 2017 org.apache.commons.lang3.time.FastDateParser,622

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c!='\''){
c=formatField.charAt(1);
}

Time : 17/08/23 23:25
----------------------------------------
Wed Aug 23 23:25:55 AEST 2017 org.apache.commons.lang3.time.FastDateParser,625
Wed Aug 23 23:25:55 AEST 2017 org.apache.commons.lang3.time.FastDateParser,304
Wed Aug 23 23:26:00 AEST 2017 org.apache.commons.lang3.time.FastDateParser,305
Wed Aug 23 23:34:34 AEST 2017 org.apache.commons.lang3.time.FastDateParser,306

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetter(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetterOrDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:37
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.6797332034566244 : [/home/similarfix/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>0,0]
char ch=cs.charAt(i);
for(int j=0;j<searchLength;j++){
if(searchChars[j]==ch){
if(Character.isHighSurrogate(ch)){
if(j==searchLast){
return true;
}
if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){
return true;
}
}else {
return true;
}
}
}

Time : 17/08/23 23:37
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/similarfix/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:37
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/similarfix/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 17/08/23 23:37
----------------------------------------
Success time : 17/08/23 23:37
