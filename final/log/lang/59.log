=================================================
Project : lang_59	start : 17/08/23 16:26
Current failed test : org.apache.commons.lang.text.StrBuilderAppendInsertTest::testLang299 | 17/08/23 16:26
Wed Aug 23 16:26:19 AEST 2017 org.apache.commons.lang.text.StrBuilder,879

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 16:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
buffer=new char[strLen];
if(strLen>=width){
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 17:52
----------------------------------------
Wed Aug 23 18:13:24 AEST 2017 org.apache.commons.lang.text.StrBuilder,880
Wed Aug 23 18:17:24 AEST 2017 org.apache.commons.lang.text.StrBuilder,881
Wed Aug 23 18:17:24 AEST 2017 org.apache.commons.lang.text.StrBuilder,882

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 19:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 17/08/23 20:21
----------------------------------------
Wed Aug 23 20:45:23 AEST 2017 org.apache.commons.lang.text.StrBuilder,883
Wed Aug 23 20:45:23 AEST 2017 org.apache.commons.lang.text.StrBuilder,884
Wed Aug 23 20:45:23 AEST 2017 org.apache.commons.lang.text.StrBuilder,107

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
super();
if(initialCapacity<=0){
initialCapacity=CAPACITY;
}
buffer=new char[CAPACITY];

Time : 17/08/23 20:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
super();
if(size<=0){
initialCapacity=CAPACITY;
}
buffer=new char[initialCapacity];

Time : 17/08/23 20:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
super();
if(initialCapacity<=CAPACITY){
initialCapacity=CAPACITY;
}
buffer=new char[initialCapacity];

Time : 17/08/23 20:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
super();
if(size<=CAPACITY){
initialCapacity=CAPACITY;
}
buffer=new char[initialCapacity];

Time : 17/08/23 20:48
----------------------------------------
Wed Aug 23 20:48:34 AEST 2017 org.apache.commons.lang.text.StrBuilder,108
Wed Aug 23 20:48:58 AEST 2017 org.apache.commons.lang.text.StrBuilder,111
Wed Aug 23 20:48:58 AEST 2017 Wed Aug 23 20:48:58 AEST 2017 : org.apache.commons.lang.text.StrBuilder,112=>Find no block
Wed Aug 23 20:48:58 AEST 2017 org.apache.commons.lang.text.StrBuilder,228

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(CAPACITY>buffer.length){
char[] old=buffer;
buffer=new char[capacity];
ensureCapacity(capacity+CAPACITY);
System.arraycopy(old,0,buffer,0,size);
}

Time : 17/08/23 20:51
----------------------------------------
Wed Aug 23 21:02:10 AEST 2017 org.apache.commons.lang.text.StrBuilder,233

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(CAPACITY>buffer.length){
char[] old=buffer;
buffer=new char[capacity];
ensureCapacity(capacity+CAPACITY);
System.arraycopy(old,0,buffer,0,size);
}
return this;

Time : 17/08/23 21:04
----------------------------------------
Wed Aug 23 21:16:08 AEST 2017 org.apache.commons.lang.text.StrTokenizer,241
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,118=>Find no block
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,120=>Find no block
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,122=>Find no block
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,124=>Find no block
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,127=>Find no block
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,129=>Find no block
Wed Aug 23 21:16:31 AEST 2017 org.apache.commons.lang.text.StrTokenizer,242
Wed Aug 23 21:16:31 AEST 2017 Wed Aug 23 21:16:31 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,243=>Find no block
Wed Aug 23 21:16:31 AEST 2017 org.apache.commons.lang.text.StrTokenizer,252
Wed Aug 23 21:17:03 AEST 2017 org.apache.commons.lang.text.StrTokenizer,253
Wed Aug 23 21:17:35 AEST 2017 org.apache.commons.lang.text.StrTokenizer,254
Wed Aug 23 21:17:35 AEST 2017 org.apache.commons.lang.text.StrTokenizer,256
Wed Aug 23 21:17:35 AEST 2017 Wed Aug 23 21:17:35 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,258=>Find no block
Wed Aug 23 21:17:35 AEST 2017 org.apache.commons.lang.text.StrTokenizer,267
Wed Aug 23 21:17:49 AEST 2017 org.apache.commons.lang.text.StrTokenizer,268
Wed Aug 23 21:17:49 AEST 2017 Wed Aug 23 21:17:49 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,269=>Find no block
Wed Aug 23 21:17:49 AEST 2017 org.apache.commons.lang.text.StrTokenizer,278
Wed Aug 23 21:17:49 AEST 2017 org.apache.commons.lang.text.StrTokenizer,279
Wed Aug 23 21:17:49 AEST 2017 Wed Aug 23 21:17:49 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,280=>Find no block
Wed Aug 23 21:17:49 AEST 2017 org.apache.commons.lang.text.StrTokenizer,289
Wed Aug 23 21:17:50 AEST 2017 org.apache.commons.lang.text.StrTokenizer,290
Wed Aug 23 21:17:50 AEST 2017 Wed Aug 23 21:17:50 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,291=>Find no block
Wed Aug 23 21:17:50 AEST 2017 org.apache.commons.lang.text.StrTokenizer,302
Wed Aug 23 21:18:14 AEST 2017 org.apache.commons.lang.text.StrTokenizer,303
Wed Aug 23 21:18:14 AEST 2017 Wed Aug 23 21:18:14 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,304=>Find no block
Wed Aug 23 21:18:14 AEST 2017 org.apache.commons.lang.text.StrTokenizer,315
Wed Aug 23 21:18:28 AEST 2017 org.apache.commons.lang.text.StrTokenizer,316
Wed Aug 23 21:18:28 AEST 2017 Wed Aug 23 21:18:28 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,317=>Find no block
Wed Aug 23 21:18:28 AEST 2017 org.apache.commons.lang.text.StrTokenizer,329
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,330
Wed Aug 23 21:18:59 AEST 2017 Wed Aug 23 21:18:59 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,331=>Find no block
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,343
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,344
Wed Aug 23 21:18:59 AEST 2017 Wed Aug 23 21:18:59 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,345=>Find no block
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,357
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,358
Wed Aug 23 21:18:59 AEST 2017 Wed Aug 23 21:18:59 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,359=>Find no block
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,371
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,372
Wed Aug 23 21:18:59 AEST 2017 Wed Aug 23 21:18:59 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,373=>Find no block
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,387
Wed Aug 23 21:18:59 AEST 2017 org.apache.commons.lang.text.StrTokenizer,388
Wed Aug 23 21:19:00 AEST 2017 Wed Aug 23 21:19:00 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,389=>Find no block
Wed Aug 23 21:19:00 AEST 2017 org.apache.commons.lang.text.StrTokenizer,403
Wed Aug 23 21:19:00 AEST 2017 org.apache.commons.lang.text.StrTokenizer,404
Wed Aug 23 21:19:00 AEST 2017 Wed Aug 23 21:19:00 AEST 2017 : org.apache.commons.lang.text.StrTokenizer,405=>Find no block
Wed Aug 23 21:19:00 AEST 2017 org.apache.commons.lang.text.StrTokenizer,139
Wed Aug 23 21:19:05 AEST 2017 org.apache.commons.lang.text.StrTokenizer,152
Wed Aug 23 21:19:05 AEST 2017 org.apache.commons.lang.text.StrTokenizer,165
Wed Aug 23 21:19:22 AEST 2017 org.apache.commons.lang.text.StrTokenizer,166
Wed Aug 23 21:19:22 AEST 2017 org.apache.commons.lang.text.StrTokenizer,167
Wed Aug 23 21:19:22 AEST 2017 org.apache.commons.lang.text.StrTokenizer,180
Wed Aug 23 21:19:23 AEST 2017 org.apache.commons.lang.text.StrTokenizer,181
Wed Aug 23 21:19:23 AEST 2017 org.apache.commons.lang.text.StrTokenizer,182
Wed Aug 23 21:19:23 AEST 2017 org.apache.commons.lang.text.StrTokenizer,191
Wed Aug 23 21:19:27 AEST 2017 org.apache.commons.lang.text.StrTokenizer,204
Wed Aug 23 21:19:28 AEST 2017 org.apache.commons.lang.text.StrTokenizer,215
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,216
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,217
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,228
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,229
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,230
Wed Aug 23 21:19:45 AEST 2017 org.apache.commons.lang.text.StrTokenizer,415
Wed Aug 23 21:20:16 AEST 2017 org.apache.commons.lang.text.StrTokenizer,416
Wed Aug 23 21:20:16 AEST 2017 org.apache.commons.lang.text.StrTokenizer,425
Wed Aug 23 21:20:17 AEST 2017 org.apache.commons.lang.text.StrTokenizer,426
Wed Aug 23 21:20:17 AEST 2017 org.apache.commons.lang.text.StrTokenizer,428
Wed Aug 23 21:20:17 AEST 2017 org.apache.commons.lang.text.StrTokenizer,437
Wed Aug 23 21:20:18 AEST 2017 org.apache.commons.lang.text.StrTokenizer,438
Wed Aug 23 21:20:18 AEST 2017 org.apache.commons.lang.text.StrTokenizer,440
Wed Aug 23 21:20:18 AEST 2017 org.apache.commons.lang.text.StrTokenizer,449
Wed Aug 23 21:20:19 AEST 2017 org.apache.commons.lang.text.StrTokenizer,450
Wed Aug 23 21:20:19 AEST 2017 org.apache.commons.lang.text.StrTokenizer,459
Timeout time : 17/08/23 21:26
