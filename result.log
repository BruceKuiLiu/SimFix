=================================================
Project : math_41	start : 17/07/22 18:08
TIMEOUT : 5 h 0 m (18000000)
Sat Jul 22 18:08:24 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,370
Sat Jul 22 18:10:54 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,222
Sat Jul 22 18:12:32 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,258
Sat Jul 22 18:12:41 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,262
Sat Jul 22 18:17:06 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,266
Sat Jul 22 18:21:27 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,267

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!containsPositiveWeight&&weights[i]>0.0){
return false;
}

Time : 17/07/22 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
return false;
}
}

Time : 17/07/22 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
return false;
}
if(!containsPositiveWeight&&weights[i]>0.0){
return false;
}
}

Time : 17/07/22 18:53
----------------------------------------
Sat Jul 22 18:55:24 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,268
Sat Jul 22 18:55:24 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,271
Sat Jul 22 18:55:24 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,274
Sat Jul 22 18:55:24 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,277
Sat Jul 22 18:55:25 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,278
Sat Jul 22 18:55:25 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,282
Sat Jul 22 18:55:27 AEST 2017 org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,286

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!allowEmpty){
return false;
}
return test(values,begin,length,allowEmpty);

Time : 17/07/22 18:56
----------------------------------------
Sat Jul 22 18:58:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,316

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}

Time : 17/07/22 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}

Time : 17/07/22 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>values.length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(begin+length>values.length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(begin>values.length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
Mean mean=new Mean();
mean.incrementAll(values,begin,length);
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
mean.incrementAll(values,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
Mean mean=new Mean();
mean.incrementAll(values,begin,length);
double m=mean.evaluate(values,weights,begin,length);
mean.incrementAll(values,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
return Double.NaN;
}
if(length>length){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}

Time : 17/07/22 19:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}

Time : 17/07/22 19:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=1){
var=0.0;
}else if(length>2){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=1){
var=0.0;
}else if(length>2){
Mean mean=new Mean();
double m=mean.evaluate(values);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
Mean mean=new Mean();
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights.length==values.length){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights.length!=1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
Variance mean=new Variance();
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
return Double.NaN;
}
if(length==length){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,weights,m,begin,length);
}

Time : 17/07/22 19:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double var=Double.NaN;
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double var=Double.NaN;
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double var=Double.NaN;
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double var=Double.NaN;
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}

Time : 17/07/22 20:17
----------------------------------------
Sat Jul 22 20:25:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,318
Sat Jul 22 20:25:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,319
Sat Jul 22 20:25:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,320
Sat Jul 22 20:25:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,322
Sat Jul 22 20:25:59 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,323
Sat Jul 22 20:26:00 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,324
Sat Jul 22 20:26:00 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,325
Sat Jul 22 20:26:00 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,328

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}
return var;

Time : 17/07/22 20:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,weights,begin,length);
var=evaluate(values,m,begin,length);
}
}
return var;

Time : 17/07/22 20:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,weights,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}
return var;

Time : 17/07/22 20:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(test(values,begin,length)){
clear();
if(length==1){
var=0.0;
}else if(length>1){
Mean mean=new Mean();
double m=mean.evaluate(values,begin,length);
var=evaluate(values,m,begin,length);
}
}
return var;

Time : 17/07/22 20:29
----------------------------------------
Sat Jul 22 20:38:55 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,504

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}

Time : 17/07/22 20:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin;i++){
increment(values[i]);
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}

Time : 17/07/22 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<dev;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}

Time : 17/07/22 20:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}

Time : 17/07/22 20:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}

Time : 17/07/22 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isBiasCorrected){
return 0.0;
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}

Time : 17/07/22 21:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
return accum/(length-1.0);
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
return accum/length;
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=begin;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=0;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=0;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=0;i<length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=begin;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=0;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=0;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=0;i<length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>2){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>2){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=begin;i<begin+length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=1;
for(int i=begin;i<begin;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>values.length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights==null){
throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
}
if(length>values.length){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
new Variance().incrementAll(values,begin,length);
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>length){
new Variance().incrementAll(values,begin,length);
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=length;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;begin<=i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>0){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>0){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;begin<=i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;begin<i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<=i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 21:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>0){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;begin<i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>0){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<=i-length+1;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length>0){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum2=0.0;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum=0.0;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double dev=length;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum2=0.0;
double accum=0.0;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum2=0.0;
double dev=length;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum=0.0;
double dev=length;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=1){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights.length==values.length){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights.length!=1){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights==null){
throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
}
if(length!=1){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights==null){
throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
}
if(weights.length==values.length){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(weights==null){
throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
}
if(weights.length!=1){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
new Variance().incrementAll(values,begin,length);
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double sumWts=length;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double accum=0.0;
new Variance().incrementAll(values,begin,length);
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double sumWts=length;
new Variance().incrementAll(values,begin,length);
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length==length){
double sumWts=length;
double accum=0.0;
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(length!=0){
var=0.0;
}else if(length>1){
double accum=0.0;
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin+length;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}
double sumWts=0;
for(int i=0;i<weights.length;i++){
sumWts+=weights[i];
}
if(isBiasCorrected){
var=(accum-(accum2*accum2/sumWts))/(sumWts-1.0);
}else {
var=(accum-(accum2*accum2/sumWts))/sumWts;
}
}

Time : 17/07/22 22:39
----------------------------------------
Sat Jul 22 22:44:20 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,506
Sat Jul 22 22:56:36 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,507
Sat Jul 22 22:56:36 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,509
Sat Jul 22 22:56:36 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,510
Sat Jul 22 23:00:00 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,511
Sat Jul 22 23:00:01 AEST 2017 org.apache.commons.math.stat.descriptive.moment.Variance,512

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin;i++){
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}

Time : 17/07/22 23:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double dev=0.0;
double accum2=0.0;
for(int i=begin;i<begin;i++){
increment(values[i]);
dev=values[i]-mean;
accum+=weights[i]*(dev*dev);
accum2+=weights[i]*dev;
}

Time : 17/07/22 23:03
----------------------------------------
Timeout time : 17/07/22 23:08
=================================================
Project : lang_33	start : 17/07/22 23:08
TIMEOUT : 5 h 0 m (18000000)
Sat Jul 22 23:08:28 AEST 2017 org.apache.commons.lang3.ClassUtils,903
Sat Jul 22 23:22:30 AEST 2017 org.apache.commons.lang3.ClassUtils,904
Sat Jul 22 23:22:30 AEST 2017 org.apache.commons.lang3.ClassUtils,905
Sat Jul 22 23:22:30 AEST 2017 org.apache.commons.lang3.ClassUtils,906
Sat Jul 22 23:22:30 AEST 2017 org.apache.commons.lang3.ClassUtils,908

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<array.length;i++){
classes[i]=array[i]==null?null:array[i].getClass();
}

Time : 17/07/22 23:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(array==null){
return null;
}else if(array.length==0){
return ArrayUtils.EMPTY_CLASS_ARRAY;
}
Class<?>[] classes=new Class[array.length];
for(int i=0;i<array.length;i++){
classes[i]=array[i]==null?null:array[i].getClass();
}
return classes;

Time : 17/07/22 23:36
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/similar-fix/d4j/projects/lang/lang_33_buggy/src/main/java/org/apache/commons/lang3/ClassUtils.java=>903,912]
if(array==null){
return null;
}else if(array.length==0){
return ArrayUtils.EMPTY_CLASS_ARRAY;
}
Class<?>[] classes=new Class[array.length];
for(int i=0;i<array.length;i++){
classes[i]=array[i]==null?null:array[i].getClass();
}
return classes;

Time : 17/07/22 23:37
----------------------------------------
Success time : 17/07/22 23:37
=================================================
Project : lang_39	start : 17/07/22 23:37
TIMEOUT : 5 h 0 m (18000000)
Sat Jul 22 23:37:12 AEST 2017 org.apache.commons.lang3.StringUtils,3502
Sat Jul 22 23:38:25 AEST 2017 org.apache.commons.lang3.StringUtils,3648
